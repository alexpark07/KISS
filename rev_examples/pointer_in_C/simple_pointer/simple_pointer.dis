
simple_pointer:     file format elf32-i386


Disassembly of section .text:

08048350 <_start>:
 8048350:	31 ed                	xor    ebp,ebp
 8048352:	5e                   	pop    esi
 8048353:	89 e1                	mov    ecx,esp
 8048355:	83 e4 f0             	and    esp,0xfffffff0
 8048358:	50                   	push   eax
 8048359:	54                   	push   esp
 804835a:	52                   	push   edx
 804835b:	68 d0 85 04 08       	push   0x80485d0
 8048360:	68 60 85 04 08       	push   0x8048560
 8048365:	51                   	push   ecx
 8048366:	56                   	push   esi
 8048367:	68 49 85 04 08       	push   0x8048549
 804836c:	e8 bf ff ff ff       	call   8048330 <__libc_start_main@plt>
 8048371:	f4                   	hlt    
 8048372:	66 90                	xchg   ax,ax
 8048374:	66 90                	xchg   ax,ax
 8048376:	66 90                	xchg   ax,ax
 8048378:	66 90                	xchg   ax,ax
 804837a:	66 90                	xchg   ax,ax
 804837c:	66 90                	xchg   ax,ax
 804837e:	66 90                	xchg   ax,ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048383:	c3                   	ret    
 8048384:	66 90                	xchg   ax,ax
 8048386:	66 90                	xchg   ax,ax
 8048388:	66 90                	xchg   ax,ax
 804838a:	66 90                	xchg   ax,ax
 804838c:	66 90                	xchg   ax,ax
 804838e:	66 90                	xchg   ax,ax

08048390 <deregister_tm_clones>:
 8048390:	b8 27 a0 04 08       	mov    eax,0x804a027
 8048395:	2d 24 a0 04 08       	sub    eax,0x804a024
 804839a:	83 f8 06             	cmp    eax,0x6
 804839d:	77 01                	ja     80483a0 <deregister_tm_clones+0x10>
 804839f:	c3                   	ret    
 80483a0:	b8 00 00 00 00       	mov    eax,0x0
 80483a5:	85 c0                	test   eax,eax
 80483a7:	74 f6                	je     804839f <deregister_tm_clones+0xf>
 80483a9:	55                   	push   ebp
 80483aa:	89 e5                	mov    ebp,esp
 80483ac:	83 ec 18             	sub    esp,0x18
 80483af:	c7 04 24 24 a0 04 08 	mov    DWORD PTR [esp],0x804a024
 80483b6:	ff d0                	call   eax
 80483b8:	c9                   	leave  
 80483b9:	c3                   	ret    
 80483ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

080483c0 <register_tm_clones>:
 80483c0:	b8 24 a0 04 08       	mov    eax,0x804a024
 80483c5:	2d 24 a0 04 08       	sub    eax,0x804a024
 80483ca:	c1 f8 02             	sar    eax,0x2
 80483cd:	89 c2                	mov    edx,eax
 80483cf:	c1 ea 1f             	shr    edx,0x1f
 80483d2:	01 d0                	add    eax,edx
 80483d4:	d1 f8                	sar    eax,1
 80483d6:	75 01                	jne    80483d9 <register_tm_clones+0x19>
 80483d8:	c3                   	ret    
 80483d9:	ba 00 00 00 00       	mov    edx,0x0
 80483de:	85 d2                	test   edx,edx
 80483e0:	74 f6                	je     80483d8 <register_tm_clones+0x18>
 80483e2:	55                   	push   ebp
 80483e3:	89 e5                	mov    ebp,esp
 80483e5:	83 ec 18             	sub    esp,0x18
 80483e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80483ec:	c7 04 24 24 a0 04 08 	mov    DWORD PTR [esp],0x804a024
 80483f3:	ff d2                	call   edx
 80483f5:	c9                   	leave  
 80483f6:	c3                   	ret    
 80483f7:	89 f6                	mov    esi,esi
 80483f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 24 a0 04 08 00 	cmp    BYTE PTR ds:0x804a024,0x0
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   ebp
 804840a:	89 e5                	mov    ebp,esp
 804840c:	83 ec 08             	sub    esp,0x8
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 24 a0 04 08 01 	mov    BYTE PTR ds:0x804a024,0x1
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   ax,ax

08048420 <frame_dummy>:
 8048420:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 8048425:	85 c0                	test   eax,eax
 8048427:	74 1f                	je     8048448 <frame_dummy+0x28>
 8048429:	b8 00 00 00 00       	mov    eax,0x0
 804842e:	85 c0                	test   eax,eax
 8048430:	74 16                	je     8048448 <frame_dummy+0x28>
 8048432:	55                   	push   ebp
 8048433:	89 e5                	mov    ebp,esp
 8048435:	83 ec 18             	sub    esp,0x18
 8048438:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 804843f:	ff d0                	call   eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	90                   	nop
 8048448:	e9 73 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844d <func1>:
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void func1()
{
 804844d:	55                   	push   ebp
 804844e:	89 e5                	mov    ebp,esp
 8048450:	57                   	push   edi
 8048451:	53                   	push   ebx
 8048452:	81 ec a0 00 00 00    	sub    esp,0xa0
	char buf[128] = { 0x00, };
 8048458:	8d 9d 70 ff ff ff    	lea    ebx,[ebp-0x90]
 804845e:	b8 00 00 00 00       	mov    eax,0x0
 8048463:	ba 20 00 00 00       	mov    edx,0x20
 8048468:	89 df                	mov    edi,ebx
 804846a:	89 d1                	mov    ecx,edx
 804846c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
	char *pbuf = buf;
 804846e:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 8048474:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
	int offset = 0x0;
 8048477:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0

	strcpy(buf, "0123456789012345");
 804847e:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 8048484:	c7 00 30 31 32 33    	mov    DWORD PTR [eax],0x33323130
 804848a:	c7 40 04 34 35 36 37 	mov    DWORD PTR [eax+0x4],0x37363534
 8048491:	c7 40 08 38 39 30 31 	mov    DWORD PTR [eax+0x8],0x31303938
 8048498:	c7 40 0c 32 33 34 35 	mov    DWORD PTR [eax+0xc],0x35343332
 804849f:	c6 40 10 00          	mov    BYTE PTR [eax+0x10],0x0
	printf("buf: %s\n", buf);
 80484a3:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 80484a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80484ad:	c7 04 24 f0 85 04 08 	mov    DWORD PTR [esp],0x80485f0
 80484b4:	e8 57 fe ff ff       	call   8048310 <printf@plt>

	printf("buf: ");
 80484b9:	c7 04 24 f9 85 04 08 	mov    DWORD PTR [esp],0x80485f9
 80484c0:	e8 4b fe ff ff       	call   8048310 <printf@plt>
	while( (*pbuf) != '\0' ) {
 80484c5:	eb 15                	jmp    80484dc <func1+0x8f>
		printf("%c", *pbuf);
 80484c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80484ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80484cd:	0f be c0             	movsx  eax,al
 80484d0:	89 04 24             	mov    DWORD PTR [esp],eax
 80484d3:	e8 68 fe ff ff       	call   8048340 <putchar@plt>
		pbuf++;
 80484d8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1

	strcpy(buf, "0123456789012345");
	printf("buf: %s\n", buf);

	printf("buf: ");
	while( (*pbuf) != '\0' ) {
 80484dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80484df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80484e2:	84 c0                	test   al,al
 80484e4:	75 e1                	jne    80484c7 <func1+0x7a>
		printf("%c", *pbuf);
		pbuf++;
	}
	printf("\n");
 80484e6:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
 80484ed:	e8 4e fe ff ff       	call   8048340 <putchar@plt>

	pbuf = &buf[0];
 80484f2:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 80484f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax

	*(int32_t *)&pbuf[offset] = 0x41424344;
 80484fb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
 80484fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 8048501:	01 d0                	add    eax,edx
 8048503:	c7 00 44 43 42 41    	mov    DWORD PTR [eax],0x41424344
	offset += 8;
 8048509:	83 45 f0 08          	add    DWORD PTR [ebp-0x10],0x8
	*(int8_t  *)&pbuf[offset] = 0x45;
 804850d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
 8048510:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 8048513:	01 d0                	add    eax,edx
 8048515:	c6 00 45             	mov    BYTE PTR [eax],0x45
	offset += 4;
 8048518:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
	*(int16_t *)&pbuf[offset] = 0x4647;
 804851c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
 804851f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 8048522:	01 d0                	add    eax,edx
 8048524:	66 c7 00 47 46       	mov    WORD PTR [eax],0x4647
	printf("buf: %s\n", buf);
 8048529:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 804852f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048533:	c7 04 24 f0 85 04 08 	mov    DWORD PTR [esp],0x80485f0
 804853a:	e8 d1 fd ff ff       	call   8048310 <printf@plt>
}
 804853f:	81 c4 a0 00 00 00    	add    esp,0xa0
 8048545:	5b                   	pop    ebx
 8048546:	5f                   	pop    edi
 8048547:	5d                   	pop    ebp
 8048548:	c3                   	ret    

08048549 <main>:

int main(void)
{
 8048549:	55                   	push   ebp
 804854a:	89 e5                	mov    ebp,esp
 804854c:	83 e4 f0             	and    esp,0xfffffff0
	func1();
 804854f:	e8 f9 fe ff ff       	call   804844d <func1>
	return 0;
 8048554:	b8 00 00 00 00       	mov    eax,0x0
}
 8048559:	c9                   	leave  
 804855a:	c3                   	ret    
 804855b:	66 90                	xchg   ax,ax
 804855d:	66 90                	xchg   ax,ax
 804855f:	90                   	nop

08048560 <__libc_csu_init>:
 8048560:	55                   	push   ebp
 8048561:	57                   	push   edi
 8048562:	31 ff                	xor    edi,edi
 8048564:	56                   	push   esi
 8048565:	53                   	push   ebx
 8048566:	e8 15 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 804856b:	81 c3 95 1a 00 00    	add    ebx,0x1a95
 8048571:	83 ec 1c             	sub    esp,0x1c
 8048574:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048578:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804857e:	e8 51 fd ff ff       	call   80482d4 <_init>
 8048583:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048589:	29 c6                	sub    esi,eax
 804858b:	c1 fe 02             	sar    esi,0x2
 804858e:	85 f6                	test   esi,esi
 8048590:	74 27                	je     80485b9 <__libc_csu_init+0x59>
 8048592:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804859c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80485a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 80485a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80485ab:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80485b2:	83 c7 01             	add    edi,0x1
 80485b5:	39 f7                	cmp    edi,esi
 80485b7:	75 df                	jne    8048598 <__libc_csu_init+0x38>
 80485b9:	83 c4 1c             	add    esp,0x1c
 80485bc:	5b                   	pop    ebx
 80485bd:	5e                   	pop    esi
 80485be:	5f                   	pop    edi
 80485bf:	5d                   	pop    ebp
 80485c0:	c3                   	ret    
 80485c1:	eb 0d                	jmp    80485d0 <__libc_csu_fini>
 80485c3:	90                   	nop
 80485c4:	90                   	nop
 80485c5:	90                   	nop
 80485c6:	90                   	nop
 80485c7:	90                   	nop
 80485c8:	90                   	nop
 80485c9:	90                   	nop
 80485ca:	90                   	nop
 80485cb:	90                   	nop
 80485cc:	90                   	nop
 80485cd:	90                   	nop
 80485ce:	90                   	nop
 80485cf:	90                   	nop

080485d0 <__libc_csu_fini>:
 80485d0:	f3 c3                	repz ret 
