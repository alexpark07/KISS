
simple_bof:     file format elf32-i386


Disassembly of section .text:

080483d0 <_start>:
 80483d0:	31 ed                	xor    ebp,ebp
 80483d2:	5e                   	pop    esi
 80483d3:	89 e1                	mov    ecx,esp
 80483d5:	83 e4 f0             	and    esp,0xfffffff0
 80483d8:	50                   	push   eax
 80483d9:	54                   	push   esp
 80483da:	52                   	push   edx
 80483db:	68 00 86 04 08       	push   0x8048600
 80483e0:	68 90 85 04 08       	push   0x8048590
 80483e5:	51                   	push   ecx
 80483e6:	56                   	push   esi
 80483e7:	68 54 85 04 08       	push   0x8048554
 80483ec:	e8 cf ff ff ff       	call   80483c0 <__libc_start_main@plt>
 80483f1:	f4                   	hlt    
 80483f2:	66 90                	xchg   ax,ax
 80483f4:	66 90                	xchg   ax,ax
 80483f6:	66 90                	xchg   ax,ax
 80483f8:	66 90                	xchg   ax,ax
 80483fa:	66 90                	xchg   ax,ax
 80483fc:	66 90                	xchg   ax,ax
 80483fe:	66 90                	xchg   ax,ax

08048400 <__x86.get_pc_thunk.bx>:
 8048400:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048403:	c3                   	ret    
 8048404:	66 90                	xchg   ax,ax
 8048406:	66 90                	xchg   ax,ax
 8048408:	66 90                	xchg   ax,ax
 804840a:	66 90                	xchg   ax,ax
 804840c:	66 90                	xchg   ax,ax
 804840e:	66 90                	xchg   ax,ax

08048410 <deregister_tm_clones>:
 8048410:	b8 2b a0 04 08       	mov    eax,0x804a02b
 8048415:	2d 28 a0 04 08       	sub    eax,0x804a028
 804841a:	83 f8 06             	cmp    eax,0x6
 804841d:	77 02                	ja     8048421 <deregister_tm_clones+0x11>
 804841f:	f3 c3                	repz ret 
 8048421:	b8 00 00 00 00       	mov    eax,0x0
 8048426:	85 c0                	test   eax,eax
 8048428:	74 f5                	je     804841f <deregister_tm_clones+0xf>
 804842a:	55                   	push   ebp
 804842b:	89 e5                	mov    ebp,esp
 804842d:	83 ec 18             	sub    esp,0x18
 8048430:	c7 04 24 28 a0 04 08 	mov    DWORD PTR [esp],0x804a028
 8048437:	ff d0                	call   eax
 8048439:	c9                   	leave  
 804843a:	c3                   	ret    
 804843b:	90                   	nop
 804843c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

08048440 <register_tm_clones>:
 8048440:	b8 28 a0 04 08       	mov    eax,0x804a028
 8048445:	2d 28 a0 04 08       	sub    eax,0x804a028
 804844a:	c1 f8 02             	sar    eax,0x2
 804844d:	89 c2                	mov    edx,eax
 804844f:	c1 ea 1f             	shr    edx,0x1f
 8048452:	01 d0                	add    eax,edx
 8048454:	d1 f8                	sar    eax,1
 8048456:	75 02                	jne    804845a <register_tm_clones+0x1a>
 8048458:	f3 c3                	repz ret 
 804845a:	ba 00 00 00 00       	mov    edx,0x0
 804845f:	85 d2                	test   edx,edx
 8048461:	74 f5                	je     8048458 <register_tm_clones+0x18>
 8048463:	55                   	push   ebp
 8048464:	89 e5                	mov    ebp,esp
 8048466:	83 ec 18             	sub    esp,0x18
 8048469:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804846d:	c7 04 24 28 a0 04 08 	mov    DWORD PTR [esp],0x804a028
 8048474:	ff d2                	call   edx
 8048476:	c9                   	leave  
 8048477:	c3                   	ret    
 8048478:	90                   	nop
 8048479:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

08048480 <__do_global_dtors_aux>:
 8048480:	80 3d 64 a0 04 08 00 	cmp    BYTE PTR ds:0x804a064,0x0
 8048487:	75 13                	jne    804849c <__do_global_dtors_aux+0x1c>
 8048489:	55                   	push   ebp
 804848a:	89 e5                	mov    ebp,esp
 804848c:	83 ec 08             	sub    esp,0x8
 804848f:	e8 7c ff ff ff       	call   8048410 <deregister_tm_clones>
 8048494:	c6 05 64 a0 04 08 01 	mov    BYTE PTR ds:0x804a064,0x1
 804849b:	c9                   	leave  
 804849c:	f3 c3                	repz ret 
 804849e:	66 90                	xchg   ax,ax

080484a0 <frame_dummy>:
 80484a0:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 80484a5:	85 c0                	test   eax,eax
 80484a7:	74 1e                	je     80484c7 <frame_dummy+0x27>
 80484a9:	b8 00 00 00 00       	mov    eax,0x0
 80484ae:	85 c0                	test   eax,eax
 80484b0:	74 15                	je     80484c7 <frame_dummy+0x27>
 80484b2:	55                   	push   ebp
 80484b3:	89 e5                	mov    ebp,esp
 80484b5:	83 ec 18             	sub    esp,0x18
 80484b8:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 80484bf:	ff d0                	call   eax
 80484c1:	c9                   	leave  
 80484c2:	e9 79 ff ff ff       	jmp    8048440 <register_tm_clones>
 80484c7:	e9 74 ff ff ff       	jmp    8048440 <register_tm_clones>

080484cc <vuln>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void vuln()
{
 80484cc:	55                   	push   ebp
 80484cd:	89 e5                	mov    ebp,esp
 80484cf:	57                   	push   edi
 80484d0:	53                   	push   ebx
 80484d1:	81 ec a0 00 00 00    	sub    esp,0xa0
    int j = 0xcafebabe;
 80484d7:	c7 45 f4 be ba fe ca 	mov    DWORD PTR [ebp-0xc],0xcafebabe
    char buf[128] = { 0x00, };
 80484de:	8d 9d 70 ff ff ff    	lea    ebx,[ebp-0x90]
 80484e4:	b8 00 00 00 00       	mov    eax,0x0
 80484e9:	ba 20 00 00 00       	mov    edx,0x20
 80484ee:	89 df                	mov    edi,ebx
 80484f0:	89 d1                	mov    ecx,edx
 80484f2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
    int i = 0xdeadbeef;
 80484f4:	c7 45 f0 ef be ad de 	mov    DWORD PTR [ebp-0x10],0xdeadbeef
    fgets(buf, 128*2, stdin);
 80484fb:	a1 40 a0 04 08       	mov    eax,ds:0x804a040
 8048500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048504:	c7 44 24 04 00 01 00 	mov    DWORD PTR [esp+0x4],0x100
 804850b:	00 
 804850c:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 8048512:	89 04 24             	mov    DWORD PTR [esp],eax
 8048515:	e8 86 fe ff ff       	call   80483a0 <fgets@plt>

    printf("buf: %s\n", buf);
 804851a:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
 8048520:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048524:	c7 04 24 20 86 04 08 	mov    DWORD PTR [esp],0x8048620
 804852b:	e8 50 fe ff ff       	call   8048380 <printf@plt>
    printf("i: 0x%x / j: 0x%x\n", i, j);
 8048530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 8048533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048537:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 804853a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804853e:	c7 04 24 29 86 04 08 	mov    DWORD PTR [esp],0x8048629
 8048545:	e8 36 fe ff ff       	call   8048380 <printf@plt>

}
 804854a:	81 c4 a0 00 00 00    	add    esp,0xa0
 8048550:	5b                   	pop    ebx
 8048551:	5f                   	pop    edi
 8048552:	5d                   	pop    ebp
 8048553:	c3                   	ret    

08048554 <main>:

int main(int argc, char **argv)
{
 8048554:	55                   	push   ebp
 8048555:	89 e5                	mov    ebp,esp
 8048557:	83 e4 f0             	and    esp,0xfffffff0
 804855a:	83 ec 10             	sub    esp,0x10


    printf("Input your message: ");
 804855d:	c7 04 24 3c 86 04 08 	mov    DWORD PTR [esp],0x804863c
 8048564:	e8 17 fe ff ff       	call   8048380 <printf@plt>
    fflush(stdout);
 8048569:	a1 60 a0 04 08       	mov    eax,ds:0x804a060
 804856e:	89 04 24             	mov    DWORD PTR [esp],eax
 8048571:	e8 1a fe ff ff       	call   8048390 <fflush@plt>

    vuln();
 8048576:	e8 51 ff ff ff       	call   80484cc <vuln>

    return 0xff;
 804857b:	b8 ff 00 00 00       	mov    eax,0xff
}
 8048580:	c9                   	leave  
 8048581:	c3                   	ret    
 8048582:	66 90                	xchg   ax,ax
 8048584:	66 90                	xchg   ax,ax
 8048586:	66 90                	xchg   ax,ax
 8048588:	66 90                	xchg   ax,ax
 804858a:	66 90                	xchg   ax,ax
 804858c:	66 90                	xchg   ax,ax
 804858e:	66 90                	xchg   ax,ax

08048590 <__libc_csu_init>:
 8048590:	55                   	push   ebp
 8048591:	57                   	push   edi
 8048592:	31 ff                	xor    edi,edi
 8048594:	56                   	push   esi
 8048595:	53                   	push   ebx
 8048596:	e8 65 fe ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 804859b:	81 c3 65 1a 00 00    	add    ebx,0x1a65
 80485a1:	83 ec 1c             	sub    esp,0x1c
 80485a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 80485a8:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80485ae:	e8 8d fd ff ff       	call   8048340 <_init>
 80485b3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80485b9:	29 c6                	sub    esi,eax
 80485bb:	c1 fe 02             	sar    esi,0x2
 80485be:	85 f6                	test   esi,esi
 80485c0:	74 27                	je     80485e9 <__libc_csu_init+0x59>
 80485c2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80485c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 80485cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
 80485cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80485d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 80485d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80485db:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80485e2:	83 c7 01             	add    edi,0x1
 80485e5:	39 f7                	cmp    edi,esi
 80485e7:	75 df                	jne    80485c8 <__libc_csu_init+0x38>
 80485e9:	83 c4 1c             	add    esp,0x1c
 80485ec:	5b                   	pop    ebx
 80485ed:	5e                   	pop    esi
 80485ee:	5f                   	pop    edi
 80485ef:	5d                   	pop    ebp
 80485f0:	c3                   	ret    
 80485f1:	eb 0d                	jmp    8048600 <__libc_csu_fini>
 80485f3:	90                   	nop
 80485f4:	90                   	nop
 80485f5:	90                   	nop
 80485f6:	90                   	nop
 80485f7:	90                   	nop
 80485f8:	90                   	nop
 80485f9:	90                   	nop
 80485fa:	90                   	nop
 80485fb:	90                   	nop
 80485fc:	90                   	nop
 80485fd:	90                   	nop
 80485fe:	90                   	nop
 80485ff:	90                   	nop

08048600 <__libc_csu_fini>:
 8048600:	f3 c3                	repz ret 
 8048602:	66 90                	xchg   ax,ax
